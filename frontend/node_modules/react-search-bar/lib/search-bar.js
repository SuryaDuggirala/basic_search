'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _reactAutobind = require('react-autobind');

var _reactAutobind2 = _interopRequireDefault(_reactAutobind);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _suggestions = require('./suggestions');

var _suggestions2 = _interopRequireDefault(_suggestions);

var noop = function noop() {};

var SearchBar = (function (_React$Component) {
  _inherits(SearchBar, _React$Component);

  function SearchBar(props) {
    _classCallCheck(this, SearchBar);

    _get(Object.getPrototypeOf(SearchBar.prototype), 'constructor', this).call(this, props);
    (0, _invariant2['default'])(props.onChange, 'You must set the onChange prop.');
    this.state = {
      focused: false,
      highlightedItem: -1,
      searchTerm: '',
      suggestions: [],
      value: ''
    };
    (0, _reactAutobind2['default'])(this);
  }

  _createClass(SearchBar, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (this.props.autoFocus) {
        this.refs.input.focus();
      }
    }
  }, {
    key: 'getNormalizedInput',
    value: function getNormalizedInput() {
      return this.state.value.trim().toLowerCase();
    }
  }, {
    key: 'autosuggest',
    value: function autosuggest() {
      var _this = this;

      var searchTerm = this.getNormalizedInput();

      new Promise(function (resolve) {
        _this.props.onChange(searchTerm, resolve);
      }).then(function (suggestions) {
        _this.setState({
          highlightedItem: -1,
          searchTerm: searchTerm,
          suggestions: suggestions
        });
      })['catch'](this.props.onError);
    }
  }, {
    key: 'scroll',
    value: function scroll(upScroll) {
      var nextItem = 0;
      var _state = this.state;
      var item = _state.highlightedItem;
      var suggestions = _state.suggestions;

      var lastItem = suggestions.length - 1;

      if (upScroll) {
        nextItem = item <= 0 ? lastItem : item - 1;
      } else {
        nextItem = item === lastItem ? 0 : item + 1;
      }

      this.setState({
        highlightedItem: nextItem,
        value: suggestions[nextItem]
      });
    }
  }, {
    key: 'search',
    value: function search() {
      clearTimeout(this.timer);
      this.refs.input.blur();
      this.setState({
        highlightedItem: -1,
        suggestions: []
      });

      if (this.props.onSearch) {
        this.props.onSearch(this.getNormalizedInput());
      }
    }
  }, {
    key: 'clearSearch',
    value: function clearSearch() {
      this.setState({
        highlightedItem: -1,
        searchTerm: '',
        suggestions: [],
        value: ''
      });
    }
  }, {
    key: 'onChange',
    value: function onChange(event) {
      clearTimeout(this.timer);
      var value = event.target.value;

      if (!value) {
        return this.clearSearch();
      }

      this.setState({ value: value });
      this.timer = setTimeout(this.autosuggest, this.props.delay);
    }
  }, {
    key: 'onKeyDown',
    value: function onKeyDown(event) {
      switch (event.key) {
        case "ArrowUp":
        case "ArrowDown":
          event.preventDefault();
          this.scroll(event.key === "ArrowUp");
          break;

        case "Enter":
          this.search();
          break;

        case "Escape":
          this.refs.input.blur();
          break;
      }
    }
  }, {
    key: 'onSelection',
    value: function onSelection(value) {
      this.setState({ value: value }, this.search);
    }
  }, {
    key: 'onSearch',
    value: function onSearch(event) {
      event.preventDefault();
      this.search();
    }
  }, {
    key: 'toggleFocus',
    value: function toggleFocus() {
      this.setState({
        focused: !this.state.focused
      });
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2['default'].createElement(
        'div',
        { className: 'search-bar-wrapper' },
        _react2['default'].createElement(
          'div',
          {
            className: (0, _classnames2['default'])({
              "search-bar-field": true,
              "is-focused": this.state.focused,
              "has-suggestions": this.state.suggestions.length > 0
            })
          },
          _react2['default'].createElement('input', {
            className: 'search-bar-input',
            name: this.props.inputName,
            type: 'text',
            maxLength: '100',
            ref: 'input',
            autoCapitalize: this.props.autoCapitalize,
            autoComplete: this.props.autoComplete,
            autoCorrect: this.props.autoCorrect,
            value: this.state.value,
            placeholder: this.props.placeholder,
            onChange: this.onChange,
            onFocus: this.toggleFocus,
            onBlur: this.toggleFocus,
            onKeyDown: this.state.suggestions ? this.onKeyDown : noop
          }),
          this.state.value && _react2['default'].createElement('span', {
            className: 'icon search-bar-clear',
            onClick: this.clearSearch }),
          _react2['default'].createElement('input', {
            className: 'icon search-bar-submit',
            type: 'submit',
            onClick: this.onSearch
          })
        ),
        this.state.suggestions.length > 0 && _react2['default'].createElement(_suggestions2['default'], {
          searchTerm: this.state.searchTerm,
          suggestions: this.state.suggestions,
          highlightedItem: this.state.highlightedItem,
          onSelection: this.onSelection
        })
      );
    }
  }]);

  return SearchBar;
})(_react2['default'].Component);

SearchBar.propTypes = {
  autoFocus: _react.PropTypes.bool,
  delay: _react.PropTypes.number,
  inputName: _react.PropTypes.string,
  onChange: _react.PropTypes.func.isRequired,
  onSearch: _react.PropTypes.func,
  placeholder: _react.PropTypes.string
};

SearchBar.defaultProps = {
  autoCapitalize: "off",
  autoComplete: "off",
  autoCorrect: "off",
  autoFocus: true,
  delay: 200,
  onError: noop
};

exports['default'] = SearchBar;
module.exports = exports['default'];